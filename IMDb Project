---view dataset---
SELECT *
FROM CopyofIMDBTop250MoviesCleanedIMDBTop250Movies

--change table name--
ALTER TABLE CopyofIMDBTop250MoviesCleanedIMDBTop250Movies RENAME TO Movies

--top 5 budgeted movies--
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5

--Princess Mononoke update--
UPDATE Movies
SET budget = Replace(budget, 2400000000, 23500000)

--3 idiots update--
UPDATE Movies
SET budget = REPLACE(budget, 550000000, 6700000)

--updated top 5 budgeted movies--
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5

--top 5 rated movies--
SELECT name, rating
FROM Movies
ORDER BY rating DESC
LIMIT 5

--top 5 box office hits--
SELECT name, box_office
FROM Movies
ORDER BY box_office DESC
LIMIT 5

--top 10 highest profit--
SELECT name, box_office, budget, (box_office - budget) AS profit
FROM Movies
ORDER BY profit
LIMIT 10

--lowest profit--
SELECT name, box_office, budget, (box_office - budget) AS profit
FROM Movies
ORDER BY profit
LIMIT 10

--most popular genre-- 
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5



--top 10 directors-- 
 SELECT directors, COUNT(*) AS Number_of_movies
 FROM Movies
 GROUP BY directors
 ORDER BY COUNT(*) DESC
 Limit 10
 
 --how many movies in each rating catagory--
 Select certificate, count(*) AS total
FROM Movies
group by certificate 
order by total DESC

 --best year for movies--
  SELECT year, COUNT(year) AS Number_of_Movies_Per_Year
 FROM Movies
 GROUP BY year
 ORDER BY COUNT(year) DESC
 Limit 10
 
 --how many movies in each decade-- 
 SELECT 
    year/10 * 10 + 1 as decade_start,
    year/10 * 10 + 10 as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start
